{"version":3,"sources":["ng://ngx-indexed-db/lib/ngx-indexed-db.service.ts","ng://ngx-indexed-db/lib/ngx-indexed-db.module.ts"],"names":["NgxIndexedDbService","prototype","openDBAsync","dbName","objectStore","version","_this","this","Observable","observer","request","indexedDB","open","onsuccess","event","db","result","next","readyState","complete","onerror","console","error","name","onupgradeneeded","createObjectStore","autoIncrement","onblocked","getObjectStore","storeName","mode","transaction","getAllRecordsAsync","store","openCursor","cursor","key","value","continue","getRecordAsync","get","addRecordAsync","record","put","deleteRecordAsync","delete","editRecordAsync","clearObjectStoreAsync","clear","closeDB","close","Injectable","args","providedIn","NgxIndexedDbModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n// rxjs\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxIndexedDbService {\n\n  /**\n   * The Database\n   *\n   */\n  db: IDBDatabase;\n\n  constructor() { }\n\n  /**\n   * Opens the database.\n   *\n   */\n\n  openDBAsync(dbName: string, objectStore: string, version: number): Observable<any> {\n    return new Observable((observer: Observer<string>) => {\n      // Opens DB.\n      const request: IDBOpenDBRequest = indexedDB.open(dbName, version);\n      // Success.\n      request.onsuccess = (event: Event) => {\n        this.db = (<IDBOpenDBRequest>event.target).result;\n        observer.next((<IDBOpenDBRequest>event.target).readyState);\n        observer.complete();\n      };\n      // Error.\n      request.onerror = (event: Event) => {\n        console.error('IndexedDB service: ', (<IDBOpenDBRequest>event.target).error.name);\n        observer.error((<IDBOpenDBRequest>event.target).error.name);\n      };\n      // DB does not exist, create it.\n      request.onupgradeneeded = (event: Event) => {\n        this.db = (<IDBOpenDBRequest>event.target).result;\n        // ObjectStore and calls the createStares method\n        const object: IDBObjectStore = this.db.createObjectStore(objectStore, {autoIncrement: false});\n      };\n      // IDBOpenDBRequest is blocked\n      request.onblocked = (event: Event) => {\n        console.error('IndexedDB service: ', (<IDBOpenDBRequest>event.target).error.name);\n        observer.error((<IDBOpenDBRequest>event.target).error.name);\n      };\n    });\n  }\n\n  /**\n   * Gets the object store.\n   *\n   */\n\n  private getObjectStore(storeName: string, mode: IDBTransactionMode) {\n    const tx: IDBTransaction = this.db.transaction(storeName, mode);\n    return tx.objectStore(storeName);\n  }\n\n  /**\n   * Gets all records.\n   *\n   */\n\n  getAllRecordsAsync(storeName: string) {\n    // Gets object store.\n    const store: IDBObjectStore = this.getObjectStore(storeName, 'readonly');\n\n    return new Observable((observer: Observer<any>) => {\n      // Open cursor\n      const request: IDBRequest = store.openCursor();\n      // Success.\n      request.onsuccess = (event: Event) => {\n        const cursor: IDBCursorWithValue = (<IDBRequest>event.target).result;\n        if (cursor) {\n          observer.next({key: cursor.key, value: cursor.value});\n          cursor.continue();\n        } else {\n          observer.complete();\n        }\n      };\n      // Error.\n      request.onerror = (event: Event) => {\n        console.error('IndexedDB service:', (<IDBRequest>event.target).error.name);\n        observer.error((<IDBRequest>event.target).error.name);\n      };\n    });\n  }\n\n  /**\n   * Gets record by key.\n   *\n   */\n\n  getRecordAsync(storeName: string, key: string) {\n    // Gets the object store.\n    const store: IDBObjectStore = this.getObjectStore(storeName, 'readonly');\n\n    return new Observable((observer: Observer<any>) => {\n      // Gets record by key.\n      const request: IDBRequest = store.get(key);\n      // Success.\n      request.onsuccess = (event: Event) => {\n        observer.next(request.result);\n        observer.complete();\n      };\n      // Error.\n      request.onerror = (event: Event) => {\n        console.error('IndexedDB service:', (<IDBRequest>event.target).error.name);\n        observer.error((<IDBRequest>event.target).error.name);\n      };\n    });\n  }\n\n  /**\n   * Adds a record.\n   *\n   */\n\n  addRecordAsync(storeName: string, key: string, record: any) {\n    // Gets the object store.\n    const store: IDBObjectStore = this.getObjectStore(storeName, 'readwrite');\n\n    return new Observable((observer: Observer<string>) => {\n      // Adds a new record.\n      const request: IDBRequest = store.put(record, key); // insert or update (put), different from (add)\n      // Sucess.\n      request.onsuccess = (event: Event) => {\n        observer.next((<IDBRequest>event.target).readyState);\n        observer.complete();\n      };\n      // Error.\n      request.onerror = (event: Event) => {\n        console.error('IndexedDB Service:', (<IDBRequest>event.target).error.name);\n        observer.error((<IDBRequest>event.target).error.name);\n      };\n    });\n  }\n\n  /**\n   * Deletes a record.\n   *\n   */\n\n  deleteRecordAsync(storeName: string, key: string) {\n    // Gets the object store.\n    const store: IDBObjectStore = this.getObjectStore(storeName, 'readwrite');\n\n    return new Observable((observer: Observer<string>) => {\n        const request: IDBRequest = store.delete(key); // Deletes the record by the key.\n        // Success.\n        request.onsuccess = (event: Event) => {\n            // console.log('SUCCESS EVENT', event);\n            observer.next((<IDBRequest>event.target).readyState);\n            observer.complete();\n\n        };\n        // Error.\n        request.onerror = (event: Event) => {\n            console.error('IndexedDB service:', (<IDBRequest>event.target).error.name);\n            observer.error((<IDBRequest>event.target).error.name);\n        };\n    });\n  }\n\n  /**\n   * Edits a record.\n   *\n   */\n\n  editRecordAsync(storeName: string, key: string, record: any) {\n    // redundant (addRecordAsync use IDBObjectStore.put function to add or change)\n    return this.addRecordAsync(storeName, key, record);\n  }\n\n  /**\n   * Clears an object store\n   *\n   */\n\n  clearObjectStoreAsync(storeName: string) {\n    // Gets the object store.\n    const store: IDBObjectStore = this.getObjectStore(storeName, 'readwrite');\n\n    return new Observable((observer: Observer<string>) => {\n      // Clear  store.\n      const request: IDBRequest = store.clear(); // Clears the object store.\n        // Success.\n        request.onsuccess = (event: Event) => {\n            observer.next((<IDBRequest>event.target).readyState);\n            observer.complete();\n        };\n        // Error.\n        request.onerror = (event: Event) => {\n            console.error('IndexedDB service:', (<IDBRequest>event.target).error.name);\n            observer.error((<IDBRequest>event.target).error.name);\n        };\n    });\n  }\n\n  /**\n   * Closes the database;\n   *\n   */\n\n  closeDB() {\n    this.db.close();\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: []\n})\nexport class NgxIndexedDbModule { }\n"]}