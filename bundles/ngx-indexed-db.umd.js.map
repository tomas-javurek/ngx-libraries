{"version":3,"file":"ngx-indexed-db.umd.js","sources":["ng://ngx-indexed-db/lib/ngx-indexed-db.service.ts","ng://ngx-indexed-db/lib/ngx-indexed-db.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n// rxjs\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxIndexedDbService {\n\n  /**\n   * The Database\n   *\n   */\n  db: IDBDatabase;\n\n  constructor() { }\n\n  /**\n   * Opens the database.\n   *\n   */\n\n  openDBAsync(dbName: string, objectStore: string, version: number): Observable<any> {\n    return new Observable((observer: Observer<string>) => {\n      // Opens DB.\n      const request: IDBOpenDBRequest = indexedDB.open(dbName, version);\n      // Success.\n      request.onsuccess = (event: Event) => {\n        this.db = (<IDBOpenDBRequest>event.target).result;\n        observer.next((<IDBOpenDBRequest>event.target).readyState);\n        observer.complete();\n      };\n      // Error.\n      request.onerror = (event: Event) => {\n        console.error('IndexedDB service: ', (<IDBOpenDBRequest>event.target).error.name);\n        observer.error((<IDBOpenDBRequest>event.target).error.name);\n      };\n      // DB does not exist, create it.\n      request.onupgradeneeded = (event: Event) => {\n        this.db = (<IDBOpenDBRequest>event.target).result;\n        // ObjectStore and calls the createStares method\n        const object: IDBObjectStore = this.db.createObjectStore(objectStore, {autoIncrement: false});\n      };\n      // IDBOpenDBRequest is blocked\n      request.onblocked = (event: Event) => {\n        console.error('IndexedDB service: ', (<IDBOpenDBRequest>event.target).error.name);\n        observer.error((<IDBOpenDBRequest>event.target).error.name);\n      };\n    });\n  }\n\n  /**\n   * Gets the object store.\n   *\n   */\n\n  private getObjectStore(storeName: string, mode: IDBTransactionMode) {\n    const tx: IDBTransaction = this.db.transaction(storeName, mode);\n    return tx.objectStore(storeName);\n  }\n\n  /**\n   * Gets all records.\n   *\n   */\n\n  getAllRecordsAsync(storeName: string) {\n    // Gets object store.\n    const store: IDBObjectStore = this.getObjectStore(storeName, 'readonly');\n\n    return new Observable((observer: Observer<any>) => {\n      // Open cursor\n      const request: IDBRequest = store.openCursor();\n      // Success.\n      request.onsuccess = (event: Event) => {\n        const cursor: IDBCursorWithValue = (<IDBRequest>event.target).result;\n        if (cursor) {\n          observer.next({key: cursor.key, value: cursor.value});\n          cursor.continue();\n        } else {\n          observer.complete();\n        }\n      };\n      // Error.\n      request.onerror = (event: Event) => {\n        console.error('IndexedDB service:', (<IDBRequest>event.target).error.name);\n        observer.error((<IDBRequest>event.target).error.name);\n      };\n    });\n  }\n\n  /**\n   * Gets record by key.\n   *\n   */\n\n  getRecordAsync(storeName: string, key: string) {\n    // Gets the object store.\n    const store: IDBObjectStore = this.getObjectStore(storeName, 'readonly');\n\n    return new Observable((observer: Observer<any>) => {\n      // Gets record by key.\n      const request: IDBRequest = store.get(key);\n      // Success.\n      request.onsuccess = (event: Event) => {\n        observer.next(request.result);\n        observer.complete();\n      };\n      // Error.\n      request.onerror = (event: Event) => {\n        console.error('IndexedDB service:', (<IDBRequest>event.target).error.name);\n        observer.error((<IDBRequest>event.target).error.name);\n      };\n    });\n  }\n\n  /**\n   * Adds a record.\n   *\n   */\n\n  addRecordAsync(storeName: string, key: string, record: any) {\n    // Gets the object store.\n    const store: IDBObjectStore = this.getObjectStore(storeName, 'readwrite');\n\n    return new Observable((observer: Observer<string>) => {\n      // Adds a new record.\n      const request: IDBRequest = store.put(record, key); // insert or update (put), different from (add)\n      // Sucess.\n      request.onsuccess = (event: Event) => {\n        observer.next((<IDBRequest>event.target).readyState);\n        observer.complete();\n      };\n      // Error.\n      request.onerror = (event: Event) => {\n        console.error('IndexedDB Service:', (<IDBRequest>event.target).error.name);\n        observer.error((<IDBRequest>event.target).error.name);\n      };\n    });\n  }\n\n  /**\n   * Deletes a record.\n   *\n   */\n\n  deleteRecordAsync(storeName: string, key: string) {\n    // Gets the object store.\n    const store: IDBObjectStore = this.getObjectStore(storeName, 'readwrite');\n\n    return new Observable((observer: Observer<string>) => {\n        const request: IDBRequest = store.delete(key); // Deletes the record by the key.\n        // Success.\n        request.onsuccess = (event: Event) => {\n            // console.log('SUCCESS EVENT', event);\n            observer.next((<IDBRequest>event.target).readyState);\n            observer.complete();\n\n        };\n        // Error.\n        request.onerror = (event: Event) => {\n            console.error('IndexedDB service:', (<IDBRequest>event.target).error.name);\n            observer.error((<IDBRequest>event.target).error.name);\n        };\n    });\n  }\n\n  /**\n   * Edits a record.\n   *\n   */\n\n  editRecordAsync(storeName: string, key: string, record: any) {\n    // redundant (addRecordAsync use IDBObjectStore.put function to add or change)\n    return this.addRecordAsync(storeName, key, record);\n  }\n\n  /**\n   * Clears an object store\n   *\n   */\n\n  clearObjectStoreAsync(storeName: string) {\n    // Gets the object store.\n    const store: IDBObjectStore = this.getObjectStore(storeName, 'readwrite');\n\n    return new Observable((observer: Observer<string>) => {\n      // Clear  store.\n      const request: IDBRequest = store.clear(); // Clears the object store.\n        // Success.\n        request.onsuccess = (event: Event) => {\n            observer.next((<IDBRequest>event.target).readyState);\n            observer.complete();\n        };\n        // Error.\n        request.onerror = (event: Event) => {\n            console.error('IndexedDB service:', (<IDBRequest>event.target).error.name);\n            observer.error((<IDBRequest>event.target).error.name);\n        };\n    });\n  }\n\n  /**\n   * Closes the database;\n   *\n   */\n\n  closeDB() {\n    this.db.close();\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: []\n})\nexport class NgxIndexedDbModule { }\n"],"names":["Observable","Injectable","NgModule"],"mappings":"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"}